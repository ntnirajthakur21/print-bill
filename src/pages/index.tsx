import Head from "next/head";
import { Inter } from "next/font/google";
import { ChangeEventHandler, FC, MouseEventHandler, useState } from "react";
import * as XLSX from "xlsx";
import "../styles/Home.module.css";
import Image from "next/image";
const inter = Inter({ subsets: ["latin"] });

enum EFields {
  SN = "SN",
  NAME = "NAME",
  ADDRESS = "ADDRESS",
  PHONE = "PHONE",
  PRODUCT = "PRODUCT",
  COD = "COD",
  BRANCH = "BRANCH",
}

export default function Home() {
  const [fields, setFields] = useState<Record<EFields, string>[]>([]);

  const handlePrint: MouseEventHandler<HTMLButtonElement> = (e) => {
    e.preventDefault();
    window.print();
  };

  const readUploadFile: ChangeEventHandler<HTMLInputElement> = (e) => {
    e.preventDefault();
    const file = e?.target?.files?.[0];
    const reader = new FileReader();

    reader.onload = (event) => {
      const binaryString = event.target?.result;
      const workbook = XLSX.read(binaryString, { type: "binary" });
      const sheetName = workbook.SheetNames[0]; // Assuming reading the first sheet

      const sheet = workbook.Sheets[sheetName];
      const excelData = XLSX.utils.sheet_to_json(sheet, { header: 1 });

      const headerRow = (excelData?.[0] as string[]) || [];
      const headerRowKeys = headerRow.map((header) => header.toUpperCase());

      const dataRows = excelData.slice(1) as string[][];

      const fields = Object.values(EFields);

      const fieldsIndex = fields.reduce((acc, field) => {
        if (headerRowKeys.indexOf(field) !== -1)
          acc[field] = headerRowKeys.indexOf(field) as number;
        return acc;
      }, {} as Record<EFields, number>);

      console.log("fields", fieldsIndex);

      const dataRowsObj = dataRows.map((row) => {
        return fields.reduce((acc, cell, index) => {
          return {
            ...acc,
            [cell]: row[fieldsIndex[cell as EFields] as number] as Record<
              EFields,
              string
            >[EFields],
          };
        }, {} as Record<EFields, string>);
      });

      setFields(dataRowsObj);
    };

    if (file) {
      reader.readAsBinaryString(file);
    }
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="no-print">
        <form>
          <label htmlFor="upload">Upload File</label>
          <input
            type="file"
            name="upload"
            id="upload"
            onChange={readUploadFile}
          />
        </form>

        <div>
          <button onClick={handlePrint}>Print</button>
        </div>
      </div>
      {fields.length > 0 && (
        <>
          {new Array(Math.ceil(fields.length / 6)).fill(0).map((itm, i) => (
            <div className="print">
              {fields
                .slice(i * 6, i * 6 + 6)

                .map((item, index) => (
                  <Card {...item} key={index} />
                ))}
            </div>
          ))}
        </>
      )}
    </>
  );
}

const Card: FC<Record<EFields, string>> = ({
  SN,
  NAME,
  ADDRESS,
  PHONE,
  PRODUCT,
  COD,
  BRANCH,
}) => {
  return (
    <div className="card">
      <div className="card-header">
        <div className="logo">
          <Image
            src="/logo.png"
            alt="Picture of the author"
            width={200}
            height={50}
          />
        </div>
        <div className="company">
          <p className="name">Today Trend Online Shopping</p>
          <p className="add">Ranibari, Kathmandu</p>
        </div>

        <div className="customer-info">
          <table>
            <tbody>
              <tr>
                <td>Name:</td>
                <td>{NAME}</td>
              </tr>

              <tr>
                <td>Address:</td>
                <td>{ADDRESS}</td>
              </tr>

              <tr>
                <td>Phone:</td>
                <td>{PHONE}</td>
              </tr>

              <tr>
                <td>Product:</td>
                <td>{PRODUCT}</td>
              </tr>

              <tr>
                <td>Branch:</td>
                <td>{BRANCH}</td>
              </tr>

              <tr>
                <td>COD:</td>
                <td>{COD}</td>
              </tr>
            </tbody>
          </table>
        </div>

        <div className="card-footer">
          <p>Thank you for shopping with us</p>
          <p>+977 970-3726062</p>
        </div>
      </div>
    </div>
  );
};

// {fields.length > 0 && (
//   <table className={styles.table}>
//     <thead>
//       <tr>
//         {Object.values(EFields).map((field) => (
//           <th>{field}</th>
//         ))}
//       </tr>
//     </thead>
//     <tbody>
//       {fields.map((item, index) => (
//         <tr>
//           {Object.values(EFields).map((field) => (
//             <td>{item[field]}</td>
//           ))}
//         </tr>
//       ))}
//     </tbody>
//   </table>
// )}
